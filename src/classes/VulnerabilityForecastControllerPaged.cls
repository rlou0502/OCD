public with sharing class VulnerabilityForecastControllerPaged
{
    public void DateFieldSelected() 
    {
        if(theVulnerabilityDateFilter == null)
        {
            startdateRange = '';
            enddaterange = '';
        }
    }
    public String endDateRange { get; set; }
    public String startDateRange { get; set; }
    public List<SelectOption> DateFilterOptions { get; set; }
    public String theVulnerabilityDateFilter { get; set; }
    public String secondaryDirection { get; set; }
    public List<SelectOption> sortDiections { get; set; }
    public String primaryDirection { get; set; }
    public String primarySortSelected { get; set; }
    public String sortSelection2 { get; set; }
    public List<SelectOption> sortOptions2 { get; set; }
    public String accountNameOptions { get; set; }
    public String theStatusFilter { get; set; }
    public String TheAccountNameFilter { get; set; }
    public List<SelectOption> sortOptions { get; set; }
    public String sortSelection { get; set; }
    public Map<String, Vulnerability__c> s2opp {get;set;}
    public Map<String,Boolean> sOpp {get;set;}
    public List<String> keys {get;set;}
    public Set<String> OppIdsSorted {get;set;}
    public List<Opportunity> OpportunityHeaderRow {get;set;}
    public List<Vulnerability__c> ListOfOpps;
    public List<OpportunityLineItem> ListOfOppsAndProdsProduct {get;set;}
    public List<OpportunityLineItem> ListOfOppsAndProdsOrig {get;set;}
    public List<OpportunityLineItem> ListOfOppsAndProdsShip {get;set;}
    public List<OpportunityLineItem> ListOfOppsAndProdsAcct {get;set;}
    public String DateEstimateClosedString {get;set;}
    public Product2 theProductFilter {get;set;}
    public String theAccountFilter {get;set;}
    public List<SelectOption> TerritoryOptions {get;set;}
    public List<SelectOption> BY_CycleOptions { get; set; }
    public List<SelectOption> StageNameOptions { get; set; }
    public List<SelectOption> statusOptions { get; set; }
    public Opportunity theOpportunityFilter { get; set; }
    public Vulnerability__c theVulnerabilityFilter { get; set; }
    public integer sortCounter {get;set;}
    Public integer pageNumber {get;set;}
    Public integer pageSize {get;set;}
    Public String OrderBy;
    Public integer maxpagenumber {get;set;}
    Public Map<ID,Vulnerability__c> testMap {get;set;}
    String quote = '\'';
    public VulnerabilityForecastControllerPaged() 
    {
        //default constructor
        sortCounter =1;
        pageNumber = 1;
        //need to change if pagesize 0 too if you change this
        pageSize = 50;
        maxpagenumber = 0;
        theOpportunityFilter = new Opportunity();      
        theVulnerabilityFilter = new Vulnerability__c();  
        territoryOptions = new List<SelectOption>();
        BY_CycleOptions  = new List<SelectOption>();
        StageNameOptions = new List<SelectOption>();
        statusOptions     = new List<SelectOption>();
        Schema.DescribeFieldResult territoryFieldDescription = Account.Territory__c.getDescribe();
        territoryOptions.add(new SelectOption('',''));
        for (Schema.Picklistentry picklistEntry: territoryFieldDescription.getPicklistValues())
        {
            territoryOptions.add(new SelectOption(pickListEntry.getValue(),pickListEntry.getLabel()));
        }        
        Schema.DescribeFieldResult BP_CycleFieldDescription = Vulnerability__c.BP_Cycle__c.getDescribe();
        BY_CycleOptions.add(new SelectOption('',''));
        for (Schema.Picklistentry picklistEntry: BP_CycleFieldDescription.getPicklistValues())
        {
            BY_CycleOptions.add(new SelectOption(pickListEntry.getValue(),pickListEntry.getLabel()));
        }        
        Schema.DescribeFieldResult StatusFieldDescription = Vulnerability__c.vulnerability_status__c.getDescribe();
        statusOptions.add(new SelectOption('',''));
        for (Schema.Picklistentry picklistEntry: StatusFieldDescription.getPicklistValues())
        {
            statusOptions.add(new SelectOption(pickListEntry.getValue(),pickListEntry.getLabel()));
        }        
        sortOptions = new List<SelectOption>();
        sortOptions.add(new SelectOption('',''));
        sortOptions.add(new SelectOption('Vulnerability Name','Vulnerability Name'));
        sortOptions.add(new SelectOption('Vulnerability Status','Vulnerability Status'));
        sortOptions.add(new SelectOption('Date Lost','Date Lost'));
        sortOptions.add(new SelectOption('Estimated Last Product Order Date','Estimated Last Product Order Date'));
        sortOptions.add(new SelectOption('Account Territory','Account Territory'));        
        sortOptions.add(new SelectOption('Account Name','Account Name'));
        sortOptions.add(new SelectOption('Include/Exclude','Include/Exclude'));
        sortOptions.add(new SelectOption('BP Cycle','BP Cycle'));        
        set<String> SetOfTerritories = new Set<String>();
        territoryOptions = new List<SelectOption>();
        territoryOptions.add(new SelectOption('',''));
        String theQuery3 = 'select Account_Name__r.Territory__c from Vulnerability__c where id != '+ quote + quote + 'order by Account_Name__r.Territory__c ASC';
        List<Vulnerability__c> ListOfOpps2 = Database.query(theQuery3);
        for(Vulnerability__c  o : ListOfOpps2)
        {
            if(!setofTerritories.contains(o.Account_Name__r.Territory__c))
            {
                String s = o.Account_Name__r.Territory__c;
                if(s!=null)
                {
                    SetOfTerritories.add(s);
                    territoryOptions.add(new SelectOption(s,s));
                }
            }
        }
        DateFilterOptions = new List<SelectOption>();
        DateFilterOptions.add(new SelectOption('',''));
        DateFilterOptions.add(new SelectOption('Estimated_Last_Product_Order_Date__c','Estimated Last Product Order Date'));
        DateFilterOptions.add(new SelectOption('Date_Lost__c','Date Lost'));
        /*
        Map<String, Schema.SObjectType>     globalDescribe          = Schema.getGlobalDescribe(); 
       Schema.SObjectType                  objectType              = globalDescribe.get('Vulnerability__c');
       Schema.DescribeSObjectResult        objectDescribeResult    = objectType.getDescribe();
       Map<String, Schema.SObjectField>    objectFieldMap          = objectDescribeResult.fields.getMap();
       for(String f : objectFieldMap.Keyset())
       {
           Schema.SObjectField                 objectField             = objectFieldMap.get(f);
           Schema.DescribeFieldResult          fieldDescription        = objectField.getDescribe();
           //if(fieldDescription.getType() == Displaytype.Date || fieldDescription.getType() == Displaytype.DateTime)
           //{
           //    DateFilterOptions.add(new SelectOption(fieldDescription.getName(),fieldDescription.getLabel()));
          //}
          if(fieldDescription.getType() == Displaytype.Date)
           {
              DateFilterOptions.add(new SelectOption(fieldDescription.getName(),fieldDescription.getLabel()));
          }
       }
       */
        sortDiections = new List<SelectOption>();
        sortDiections.add(new SelectOption('▲','▲'));
        sortDiections.add(new SelectOption('▼','▼'));
        primaryDirection = '▲';
        secondaryDirection = '▲';
        ListOfOpps2.clear();
        SetOfTerritories.clear();
        QueryMachine();
        
        
  }//end of default constructor
    
    public void QueryMachine()
    {
       
       s2opp = new Map<String, Vulnerability__c>();
       sopp = new Map<String, boolean>();
       keys = new List<String>();
       OppIdsSorted = new Set<String>();
       s2opp = new Map<String, Vulnerability__c>();
       keys = new List<String>();
       OppIdsSorted = new Set<String>();
       System.debug('sortSelection  = ' + sortSelection);
       String orderBy = getOrderClause();
       
       if(pagesize==0)
        pagesize = 50;
       integer offsetBY = ((pagenumber -1) * pagesize);
       String crit = ' and ((Vulnerability_Status__c=' + quote + 'High' + quote + ' or Vulnerability_Status__c=' + quote + 'Medium' + quote + ' or Vulnerability_Status__c=' + quote + 'Low' + quote +') or ((Vulnerability_Status__c=' + quote + 'Lost' + quote + ' or Vulnerability_Status__c=' + quote + 'Partially Lost' + quote + ')and Date_Lost__c = LAST_N_DAYS:365) or (Vulnerability_Status__c=' + quote + 'Not Vulnerable' + quote + ' and Date_Not_Vulnerable__c = LAST_N_DAYS:365))';
        
        if(theAccountFilter != '' && theAccountFilter != null)
        {
            crit = crit + ' and account_name__r.territory__c = ' + quote+theAccountFilter+quote;
            System.debug('crit1 = ' + crit);
        }
        /*
        if(theOpportunityFilter.BP_Cycle__c != '' && theOpportunityFilter.BP_Cycle__c !=null)
        {
            crit = crit + ' and BP_Cycle__c = ' + quote+theOpportunityFilter.BP_Cycle__c+quote;
            System.debug('crit2 = ' + crit);
        }
        */
        if(theVulnerabilityFilter.BP_Cycle__c != '' && theVulnerabilityFilter.BP_Cycle__c !=null)
        {
            crit = crit + ' and BP_Cycle__c = ' + quote+theVulnerabilityFilter.BP_Cycle__c+quote;
            System.debug('crit2 = ' + crit);
        }
        
        if(TheAccountNameFilter != '' && TheAccountNameFilter != null)
        {
            if(TheAccountNameFilter.contains('*'))
            {
                crit = crit + ' and account_name__r.name LIKE ' + quote+'%'+TheAccountNameFilter.remove('*')+'%'+quote;
                System.debug('crit4 = ' + crit);
            }
            else
            {
                crit = crit + ' and account_name__r.name = ' + quote+TheAccountNameFilter+quote;
                System.debug('crit4 = ' + crit);
            }
        }
        if(theVulnerabilityFilter.Shadow_Vulnerability_Status_for_Grid_Pag__c != '' && theVulnerabilityFilter.Shadow_Vulnerability_Status_for_Grid_Pag__c != null)
        {
            String s = theVulnerabilityFilter.Shadow_Vulnerability_Status_for_Grid_Pag__c;
            system.debug(s);
            crit = crit + ' and ';
            if(s.contains(';'))
            {
               List<String> s1 = s.split(';');
               integer i = 0;
               for(String st : s1)
               {
                   if(i == 0)
                   {
                       crit = crit + ' (Vulnerability_Status__c = ' +quote+ st +quote;
                   }
                   else
                   {
                       crit = crit + ' or Vulnerability_Status__c = ' +quote+ st +quote;
                   }
                   i++;
               }
               crit = crit + ')';
               
            }
            else
            {
                 crit = crit + ' Vulnerability_Status__c =' + quote+s+quote;
            }
            
            System.debug('crit5 = ' + crit);
        }
        if(theVulnerabilityDateFilter != '' && theVulnerabilityDateFilter != null && startdaterange != null && enddaterange != null &&  startdaterange != '' && enddaterange != '')
        {
            Date aa = Date.parse(startDateRange);
            Date bb = Date.parse(endDateRange);
            DateTime a = aa;
            DateTime b = bb;
            a = a.adddays(1);
            b = b.adddays(1);
            crit = crit + ' and ' + theVulnerabilityDateFilter + ' >= ' + a.format('yyyy-MM-dd');
            crit = crit + ' and ' + theVulnerabilityDateFilter + ' <= ' + b.format('yyyy-MM-dd');
            System.debug('crit6 = ' + crit);
        }
        System.debug('OrderBy = ' + OrderBy);
        String theQuery = 'SELECT Date_Lost__c,Annual_Revenue_at_Risk__c,Annual_Volume_at_Risk__c,Revenue_Impact_Year_of_Loss__c,Volume_Impact_Year_of_Loss__c,Vulnerability_Status__c,Estimated_Last_Product_Order_Date__c,Current_Customer_Protection_Plan__c, Account_Name__r.name,Line_of_Business__c, Account_Name__r.Territory__c, Account_Name__r.BillingCity, include_exclude__c, BP_Cycle__c, name FROM Vulnerability__c where id != '+ quote + quote + crit + ' order by ' + OrderBy + ' limit ' + pagesize + ' offset ' + offsetBY;
        String theQuery2 = 'SELECT count() FROM Vulnerability__c where id != '+ quote + quote + crit;
        //String theQuery2 = 'SELECT count() FROM Vulnerability__c';
        System.debug('thequery = ' + thequery);
        System.debug('thequery2 = ' + thequery2);
        ListOfOpps = Database.Query(thequery);
        testMap = new Map<id,Vulnerability__c>();
        
        for(Vulnerability__c o : ListOfOpps)
        {
            testMap.put(o.id,o.clone());
        }
        System.debug('Limits.getQueryRows() = ' + Limits.getQueryRows());
        Integer Oppcount = Database.countQuery(thequery2);

        decimal maxPageNumbertemp = decimal.valueof(oppcount);
        maxPageNumberTemp.round(System.roundingmode.UP);
        maxpagenumbertemp = maxpagenumbertemp.divide(decimal.valueof(pagesize),2);
        maxpagenumbertemp = maxPageNumberTemp.round(System.roundingmode.UP);            
        maxPageNumber = integer.valueof(maxPageNumberTemp);
        System.debug('maxPageNumber = ' + maxPageNumber );
        System.debug('maxPageNumberTemp = ' + maxPageNumberTemp );           
        System.debug('oppcount/pagesize = ' + (oppcount/pagesize));
        System.debug('oppcount/pagesize = ' + (decimal.valueof(oppcount)/decimal.valueof(pagesize)));
        createMaps();   
       
       
    }
    
    public void applyRecordsPerPage()
    {    
        pageNumber = 1;
        sortcounter++;
        QueryMachine();
    }
    public void primarysortselected()
    {
       sortOptions2 = new List<SelectOption>();
       sortOptions2.add(new SelectOption('',''));
       if(sortSelection != 'Vulnerability Name')
       sortOptions2.add(new SelectOption('Vulnerability Name','Vulnerability Name'));
       if(sortSelection != 'Vulnerability Status')
       sortOptions2.add(new SelectOption('Vulnerability Status','Vulnerability Status'));
       if(sortSelection != 'Date Lost')
       sortOptions2.add(new SelectOption('Date Lost','Date Lost'));
       if(sortSelection != 'Estimated Last Product Order Date')
       sortOptions2.add(new SelectOption('Estimated Last Product Order Date','Estimated Last Product Order Date'));
       if(sortSelection != 'Account Territory')
       sortOptions2.add(new SelectOption('Account Territory','Account Territory'));
       if(sortSelection != 'Account Name')
       sortOptions2.add(new SelectOption('Account Name','Account Name'));
       if(sortSelection != 'Include/Exclude')
       sortOptions2.add(new SelectOption('Include/Exclude','Include/Exclude'));
       if(sortSelection != 'BP Cycle')
       sortOptions2.add(new SelectOption('BP Cycle','BP Cycle')); 
    }
    public String getOrderClause()
    {
        if(sortSelection == 'Vulnerability Status')
        {
            OrderBy = 'Vulnerability_Status__c';
        }
        else if(sortSelection == 'Date Lost')
        {
            OrderBy = 'Date_Lost__c ';  
        }
       else if(sortSelection == 'Estimated Last Product Order Date')
       {
                OrderBy = 'Estimated_Last_Product_Order_Date__c';
       }
       else if(sortSelection == 'Account Territory')
       {
                OrderBy = 'Account_Name__r.Territory__c';
       }
       else if(sortSelection == 'Account Name')
       {
               OrderBy = 'Account_Name__r.name';
       }
       else if(sortSelection == 'Include/Exclude')
       {
               OrderBy = 'Include_Exclude__c';
       }
       else if(sortSelection == 'BP Cycle')
       {
               OrderBy = 'BP_Cycle__c';
       }
       else if(sortSelection == 'Vulnerability Name')
       {
           OrderBy = 'name';
       }
       else
       {
           OrderBy = 'name';
       }
       if(primaryDirection == '▼')
       {
           OrderBy = OrderBy + ' DESC';
       }
       OrderBy = OrderBy + ' NULLS LAST ';
       OrderBy = setSecondarySort(OrderBy);
        return orderBy;
    }
    public String setSecondarysort(String OrderBy)
    {
        if(sortSelection2 == 'Vulnerability Status')
        {
            OrderBy = OrderBy + ',Vulnerability_Status__c';
        }
        else if(sortSelection2 == 'Date Lost')
        {
            OrderBy = OrderBy + ',Date_Lost__c ';
        }
        else if(sortSelection2 == 'Estimated Last Product Order Date')
        {
            OrderBy = OrderBy + ',Estimated_Last_Product_Order_Date__c';
        }
        else if(sortSelection2 == 'Account Territory')
        {
            OrderBy = OrderBy + ',Account_Name__r.Territory__c';
        }
        else if(sortSelection2 == 'Account Name')
        {
            OrderBy = OrderBy + ',Account_Name__r.name';
        }
        else if(sortSelection2 == 'Include/Exclude')
        {
            OrderBy = OrderBy + ',Include_Exclude__c';
        }
        else if(sortSelection2 == 'BP Cycle')
        {
            OrderBy = OrderBy + ',BP_Cycle__c';
        }
        else if(sortSelection2 == 'Vulnerability Name')
        {
            OrderBy = 'name';
        }        
        if(SecondaryDirection == '▼' && sortSelection2 != null)
        {
            OrderBy = OrderBy + ' DESC';
        }
        if(OrderBy.contains(','))
        {
            OrderBy = OrderBy + ' NULLS LAST ';
        }
        return OrderBy;
    }
    public PageReference NextPage() 
    {
        if(pagenumber != maxpagenumber)
        {
            pagenumber++;
            sortcounter++;
            QueryMachine();
        } 
        return null;
    }
    public PageReference PreviousPage() 
    {
        if(PageNumber != 1)
        {
            pagenumber--;
            sortcounter++;
            QueryMachine();
        }
        
        return null;
    }
    
  
  public void createMaps() 
  {
    List<OpportunityLineItem> olis = new List<OpportunityLineItem>();
    String oppId = null;
    integer counter = 0;
    for(Vulnerability__c vul : ListOfOpps)
    {
        
        
        if(counter < pagesize)
        {
            s2opp.put(vul.id, vul);
            sopp.put(vul.id,false);
            keys.add(vul.Id); 
        }
        counter++;
    }
    System.debug('keys.size() = ' + keys.size());
     System.debug('pagesize = ' + pagesize);      
  }
  
  public PageReference save() 
  {
    List<Vulnerability__c> OppsToUpdate = new List<Vulnerability__c>();
    List<Vulnerability__c> OppsToUpdate2 = new List<Vulnerability__c>();
    Set<ID> OppIDsFailedToUpdate = new Set<ID>();
      for(Vulnerability__c o : ListOfOpps)
      {
          Vulnerability__c testo = testMap.get(o.id);
          if(ocompare(testo,o))
          {
              OppsToUpdate.add(o);
              System.debug('HELLO WORLD');
          }
          else
          {
              sopp.put(o.id,false);
          }
      }
      
      try
      {
          update OppsToUpdate;
          sortcounter++;
          QueryMachine();
      }
    catch(DmlException e)
    {
        System.debug('exception caught = ' + e.getMessage());
          ApexPages.addMessages(e);
          for(integer i = 0; i < e.getNumDml(); i++)
          {
              OppIDsFailedToUpdate.add(e.getdmlID(i));
              sOpp.put(e.getdmlID(i),true);
          }
    }
    finally
    {
          List<Vulnerability__c > OppsToFinalUpdate = new List<Vulnerability__c >();
          for(Vulnerability__c o : OppsToUpdate)
          {
              if(!OppIDsFailedToUpdate.contains(o.id))
              {
                  sOpp.put(o.id,false);
                  //build another update list of ones that didnt fail the first time
                  OppsToFinalUpdate.add(o);
              }
          }
          update OppsToFinalUpdate;
      }
    return null;
         
    //return new PageReference('/apex/OpportunityForecastPageShort');
  }
  public boolean ocompare(Vulnerability__c o1, Vulnerability__c o2)
    {
        //Revenue_Impact_Year_of_Potential_Loss__c
        if(o1.Estimated_Last_Product_Order_Date__c != o2.Estimated_Last_Product_Order_Date__c)
        return true;
        else if(o1.vulnerability_status__c != o2.vulnerability_status__c)
        return true;
        else if(o1.include_exclude__c != o2.include_exclude__c)
        return true;
        else if(o1.BP_Cycle__c != o2.BP_Cycle__c)
        return true;
        else if(o1.Date_Lost__c != o2.Date_Lost__c)
        return true;
        else if(o1.Volume_Impact_Year_of_Loss__c != o2.Volume_Impact_Year_of_Loss__c)
        return true;
        else if(o1.Revenue_Impact_Year_of_Loss__c != o2.Revenue_Impact_Year_of_Loss__c)
        return true;
        else if(o1.Annual_Revenue_at_Risk__c != o2.Annual_Revenue_at_Risk__c)
        return true;
        else if(o1.Annual_Volume_at_Risk__c != o2.Annual_Volume_at_Risk__c)
        return true;
        else
        return false;
    }
  public PageReference cancel() 
  {
    /*
    PageReference pr = new PageReference('/006/o');
    pr.setRedirect(true);
    return pr;
    */
    sortcounter++;
    QueryMachine();
    return null;
    
  }
  // Sorting Methods //
 
  public PageReference applySort() 
    {
       pagenumber = 1;
       System.debug('inside sort = ');
       QueryMachine();
       return null;           
    }
    public PageReference applyBP_CycleFilter() 
    {
        pagenumber = 1;
        QueryMachine();
        return null;
    }
    public PageReference applyAccountNameFilter() 
    {
        pagenumber = 1;
        QueryMachine();
        return null;
    }
    public PageReference applyStatusFilter() 
    {
        pagenumber = 1;
        QueryMachine();
        return null;
    }
    public PageReference applyTerritoryFilter() 
    {
        pagenumber = 1;
        QueryMachine();
        return null;
    }
}